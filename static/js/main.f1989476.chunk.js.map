{"version":3,"sources":["api.js","helper.js","cmps/Current.js","cmps/Day.js","cmps/Days.js","cmps/Info.js","cities.js","cmps/Select.js","App.js","serviceWorker.js","index.js"],"names":["weatherAPI","getWeather","city","a","fetch","wetherDataResponse","json","wetherInJson","cod","lastSelectedDay","sortedWether","list","filter","w","dt_txt","split","getIconUrl","icon","getBigVersion","StyledDiv","styled","div","Current","date","temp","feelsLike","des","src","align","style","fontSize","toFixed","color","props","primary","Day","day","setSelectedDayIndex","dayIndex","selectedDayIndex","onClick","weather","main","Days","days","map","index","key","dt","toString","Info","setState","componentDidUpdate","prevProps","selectedCity","data","weatherData","state","this","currentDayWeather","StyledInfo","feels_like","description","React","Component","StyledSelect","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","Search","setSelectedCity","classes","useState","val","setVal","FormControl","className","InputLabel","id","Select","labelId","value","onChange","e","target","Cities","MenuItem","App","MainStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f1989476.chunk.js","sourcesContent":["export const weatherAPI = {\n  getWeather: async city => {\n    const wetherDataResponse = await fetch(`http://api.openweathermap.org/data/2.5/forecast?lang=en&units=metric&APPID=d40a503250d24c66b99389f9d54b9381&q=${city}`)\n    const wetherInJson = await wetherDataResponse.json()\n    if (wetherInJson.cod=='200') {\n      let lastSelectedDay =''\n      let sortedWether = wetherInJson.list.filter(w=>{\n        if (w.dt_txt.split(' ')[0] !== lastSelectedDay) {\n          lastSelectedDay = w.dt_txt.split(' ')[0]\n          return true\n        } else\n          return false\n      })\n      return sortedWether\n    } else\n      return false\n  }\n}\n","export const getIconUrl = (icon, getBigVersion = false) => `http://openweathermap.org/img/w${getBigVersion ? `n` : ''}/${icon}${getBigVersion ? `@2x` : ''}.png`","import React from 'react'\nimport styled from 'styled-components'\nimport {getIconUrl} from '../helper'\n\nconst Current = ({date, temp, feelsLike, icon, des}) => {\n  return <StyledDiv>\n    <div><img src={getIconUrl(icon, true)} align='left' /> <span style={{fontSize: 72}}>{temp.toFixed()}</span></div>\n    <div style={{color: '#878787', fontSize: 21}}>\n      <div>{date.split(' ')[0]}</div>\n      <div>Feels like: {feelsLike.toFixed()}</div>\n      <div>{des}</div>\n    </div>\n  </StyledDiv>\n}\n\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-columns: 2fr 4fr;\n`\n\nexport default Current\n","import React from 'react'\nimport styled from 'styled-components'\nimport {getIconUrl} from '../helper'\n\nconst Day = ({day, setSelectedDayIndex, dayIndex, selectedDayIndex}) => {\n  const primary = dayIndex === selectedDayIndex\n  return <StyledDiv primary={primary} onClick={()=>{setSelectedDayIndex(dayIndex)}}>\n    <div>{day.dt_txt.split(' ')[0]}</div>\n    <div><img src={getIconUrl(day.weather[0].icon)} /></div>\n    <div>{day.main.temp.toFixed()}</div>\n  </StyledDiv>\n}\n\nconst StyledDiv = styled.div`\n  border: 1px solid #878787;\n  color: ${props=> props.primary && 'green'};\n  background-color: ${props=> props.primary && '#eff0f1'};\n  text-align: center;\n  border-radius: 15px;\n  padding: 10px 0px;\n`\n\nexport default Day","import React from 'react'\nimport styled from 'styled-components'\nimport Day from './Day'\n\nconst Days = ({days, setSelectedDayIndex, selectedDayIndex}) => {\n  return <StyledDiv>\n    {days.map((day, index)=><Day selectedDayIndex={selectedDayIndex} key={day.dt.toString()} day={day} dayIndex={index} setSelectedDayIndex={setSelectedDayIndex}/>)}\n  </StyledDiv>\n}\n\nconst StyledDiv = styled.div`\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  grid-gap: 15px;\n`\n\nexport default Days","import React from 'react'\nimport {weatherAPI} from '../api'\nimport styled from 'styled-components'\nimport Current from './Current'\nimport Days from './Days'\n\nexport default class Info extends React.Component{\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      weatherData: false,\n      selectedDayIndex: 0\n    }\n  }\n\n  setSelectedDayIndex = index => this.setState({selectedDayIndex: index})\n  \n  componentDidUpdate = async (prevProps) => {\n    if (this.props.selectedCity!=='' && prevProps.selectedCity!==this.props.selectedCity) {\n      let data = await weatherAPI.getWeather(this.props.selectedCity)\n      this.setState({weatherData: data})\n    }\n  }\n\n  render() {\n    const {selectedCity} = this.props\n    const {weatherData} = this.state\n\n    if (!weatherData) return <>Select a city</>\n    const currentDayWeather = weatherData[this.state.selectedDayIndex]\n\n    return <StyledInfo>\n      <Current \n        date = {currentDayWeather.dt_txt} \n        temp = {currentDayWeather.main.temp}\n        feelsLike = {currentDayWeather.main.feels_like}\n        icon = {currentDayWeather.weather[0].icon} \n        des = {currentDayWeather.weather[0].description} \n      />\n      <Days days={weatherData} selectedDayIndex={this.state.selectedDayIndex} setSelectedDayIndex={this.setSelectedDayIndex}/>\n    </StyledInfo>\n  }\n}\n\n\nconst StyledInfo = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n`","export default  [\n  'moscow', 'Castino', 'Villalobos', 'Cautano', 'Cave'\n]","import React, { useState } from 'react'\nimport Cities from '../cities'\nimport styled from 'styled-components'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst Search = ({setSelectedCity}) => {\n  const classes = useStyles()\n  const [val, setVal] = useState('select a city')\n\n  const onSelect = e => {\n    const value = e.target.value\n    if (value!=='')  {\n      setVal(value)\n      setSelectedCity(value)\n    }\n  }\n\n  return <StyledSelect>\n    <FormControl  className={classes.formControl}>\n        <InputLabel id=\"select-label\">Cities</InputLabel>\n        <Select\n          labelId=\"select-label\"\n          id=\"city-select\"\n          value={val}\n          onChange={onSelect}\n        >\n          {Cities.map(city=><MenuItem key={city} value={city}>{city}</MenuItem>)}\n        </Select>\n      </FormControl>\n  </StyledSelect>\n}\n\nconst StyledSelect = styled.div`\n  \n`\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}))\n\nexport default Search\n","import React from 'react'\nimport Info from './cmps/Info'\nimport Select from './cmps/Select'\nimport styled from 'styled-components'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      selectedCity: ''\n    }\n  }\n\n  setSelectedCity = city => this.setState({selectedCity: city})\n\n\n  render () {\n    return <MainStyle>\n      <Select setSelectedCity={this.setSelectedCity}/>\n      <Info selectedCity={this.state.selectedCity}/>\n    </MainStyle>\n  }\n}\n\n\nconst MainStyle = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  margin: 12%;\n`\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}